////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
//                                                                                    //
//                     Configuratie voor BAG Geocodeer Module                         //
//                                                                                    //
//          Vrije Universiteit Amsterdam | SPINlab / Object Vision 2023               //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
//                                 Gebruikte templates                                //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////

container templates
{
	Template uniformeer_string
	{
		// begin case parameters
		unit<uint32> domain;
		attribute<string> txt (domain);
		// eind case parameters

		attribute<string> vervangen (domain) :=
			replace(
				lowercase(from_utf(txt))
				,stringparams/space ,stringparams/emptystring
				,stringparams/squote,stringparams/emptystring
				,stringparams/point ,stringparams/emptystring
			);

		attribute<string> resultaat (domain) := replace_value(vervangen, stringparams/emptystring, string(0/0));
	}

	Template uniformeer_string_straatnaam
	{
		// begin case parameters
		unit<uint32> domain;
		attribute<string> txt (domain);
		// eind case parameters

		container vervangstappen :=
			for_each_ne(
				 'step_' + vervangingen/sets/number_str
				,'vervang(
					domain ,
					 step_' + string(id(vervangingen/sets)) + '/staptype/resultaat ,'
					+ vervangingen/sets/number_str   +  ' ,'
					+ string(vervangingen/sets/type) +  ' ,'
					+ quote(string(vervangingen/sets/values))  +  ' ,'
					+ string(vervangingen/sets/lengte_TeVervangen) +
				')'
			)
		{
			container step_0
			{
				container staptype
				{
					attribute<string> resultaat (domain) := lowercase(from_utf(txt));
				}
				container ter_controle
				{
					attribute<bool> is_aangepast (domain) := txt <> staptype/resultaat;
					unit<uint32> aangepast := select_with_attr_by_org_rel(staptype, is_aangepast)
					{
						attribute<string> voor := txt[org_rel];
						attribute<string> na   := resultaat;
					}
					unit<uint32> aangepast_uniek := unique(aangepast/voor)
					{
						attribute<string> voor := values;
						attribute<string> na   := rjoin(values, aangepast/voor, aangepast/na);
					}
				}
			}
		}
		attribute<string> resultaat0  (domain) := = 'replace_value(vervangstappen/step_' + string(max(vervangingen/sets/number)) + '/staptype/resultaat , stringparams/emptystring, string(0/0))';
		attribute<string> resultaat   (domain) := replace(resultaat0, ';', '');
	}

	Template vervang
	{
		// begin case parameters
		unit<uint32>                 domain;
		attribute<string>            src (domain);
		parameter<uint32>            number;
		parameter<vervangingen/type> type;
		parameter<string>            set;
		parameter<uint32>            lengte_TeVervangen;

		// eind case parameters
		unit<uint32> lookup_table := select_with_attr_by_cond(vervangingen/table, vervangingen/table/set == set);

		parameter<string> staptype_expr :=
			switch(
				 case(type == 1[vervangingen/type],'vervang_start(domain, src, number, lookup_table, lengte_TeVervangen)')
				,case(type == 2[vervangingen/type],'vervang_einde(domain, src, number, lookup_table, lengte_TeVervangen)')
				,'vervang_alle(domain, src, number)'
			);

		container staptype := =staptype_expr;

		container ter_controle
		{
			attribute<bool> is_aangepast (domain) := src <> staptype/resultaat;
			unit<uint32> aangepast := select_with_attr_by_org_rel(staptype, is_aangepast)
			{
				attribute<string> voor := src[org_rel];
				attribute<string> na   := resultaat[org_rel];
			}
			unit<uint32> aangepast_uniek := Unique(aangepast/voor)
			{
				attribute<string> voor := values;
				attribute<string> na   := rjoin(values, aangepast/voor, aangepast/na);
			}
		}
	}

	Template vervang_start
	{
		// begin case parameters
		unit<uint32>      domain;
		attribute<string> src (domain);
		parameter<uint32> number;
		unit<uint32>      lookup_table;
		parameter<uint32> lengte_TeVervangen;
		// eind case parameters

		attribute<uint32> src_len             (domain) := strlen(src);
		attribute<int32>  src_rest_len_src    (domain) := int32(src_len) - int32(lengte_TeVervangen);
		attribute<uint32> src_rest_len        (domain) := uint32(max_elem(0i, src_rest_len_src));

		attribute<string> src_start           (domain) := substr(src,0,lengte_TeVervangen);
		attribute<string> src_rest            (domain) := substr(src,lengte_TeVervangen, src_rest_len);

		attribute<string> src_start_vervangen (domain) := MakeDefined(rjoin(src_start, lookup_table/TeVervangen, lookup_table/VervangenDoor),src_start);
		attribute<string> resultaat           (domain) := src_start_vervangen + src_rest;
	}

	Template vervang_einde
	{
		// begin case parameters
		unit<uint32>      domain;
		attribute<string> src (domain);
		parameter<uint32> number;
		unit<uint32>      lookup_table;
		parameter<uint32> lengte_TeVervangen;
		// eind case parameters

		attribute<uint32> src_len             (domain) := strlen(src);
		attribute<int32>  src_rest_len_src    (domain) := int32(src_len) - int32(lengte_TeVervangen);
		attribute<uint32> src_rest_len        (domain) := uint32(max_elem(0i, src_rest_len_src));

		attribute<string> src_einde           (domain) := substr(src,src_rest_len,lengte_TeVervangen);
		attribute<string> src_rest            (domain) := substr(src,0,src_rest_len);

		attribute<string> src_einde_vervangen (domain) := MakeDefined(rjoin(src_einde, lookup_table/TeVervangen, lookup_table/VervangenDoor),src_einde);
		attribute<string> resultaat           (domain) := src_rest + src_einde_vervangen;
	}

	Template vervang_alle
	{
		// begin case parameters
		unit<uint32>      domain;
		attribute<string> src (domain);
		parameter<uint32> number;
		// eind case parameters

		parameter<string> replace_part_expr  := AsItemList(quote(lookup_table/TeVervangen) + ',' + quote(lookup_table/VervangenDoor));
		attribute<string> resultaat (domain) := ='replace(src, ' + replace_part_expr +')';
	}

	Template maak_aggregatie_entiteit
	{
		// begin case parameters
		parameter<string> code;
		attribute<string> key (BAG/adres);
		parameter<uint8>  aggtype; // 0 = mean, 1= median 
		// eind case parameters

		attribute<domein> domein_rel (BAG/adres):= rlookup(key, domein/values);

		unit<uint32> domein := unique(key), FreeData = "False"
		{
			attribute<float32>  meanX    := mean(BAG/adres/X , domein_rel);
			attribute<float32>  meanY    := mean(BAG/adres/Y , domein_rel);
			attribute<float32>  medianX  := rth_element(BAG/adres/X ,0.5f, domein_rel);
			attribute<float32>  medianY  := rth_element(BAG/adres/Y ,0.5f, domein_rel);

			attribute<uint32>   countX   := count(BAG/adres/X, domein_rel);
			attribute<float32>  varX     := var(BAG/adres/X  , domein_rel);
			attribute<float32>  varY     := var(BAG/adres/Y  , domein_rel);
			attribute<float32>  var      := varX + varY;
			attribute<point_rd> geometry := =aggtype == 0b ? 'point_xy(meanX,meanY,point_rd)' : 'point_xy(medianX,medianY,point_rd)';

			attribute<string>  nummeraanduiding_id := countX == 1 ? first(BAG/adres/nummeraanduiding_id , domein_rel) : stringparams/emptystring;
			attribute<string>  bag_postcode        := min(BAG/adres/postcode      , domein_rel) == max(BAG/adres/postcode      , domein_rel) ? min(BAG/adres/postcode      , domein_rel) : stringparams/emptystring;
			attribute<string>  bag_straatnaam      := min(BAG/adres/straatnaam    , domein_rel) == max(BAG/adres/straatnaam    , domein_rel) ? min(BAG/adres/straatnaam    , domein_rel) : stringparams/emptystring;
			attribute<string>  bag_huisnummer      := min(BAG/adres/huisnummer_str, domein_rel) == max(BAG/adres/huisnummer_str, domein_rel) ? min(BAG/adres/huisnummer_str, domein_rel) : stringparams/emptystring;
			attribute<string>  bag_huisletter      := min(BAG/adres/huisletter    , domein_rel) == max(BAG/adres/huisletter    , domein_rel) ? min(BAG/adres/huisletter    , domein_rel) : stringparams/emptystring;
			attribute<string>  bag_toevoeging      := min(BAG/adres/toevoeging    , domein_rel) == max(BAG/adres/toevoeging    , domein_rel) ? min(BAG/adres/toevoeging    , domein_rel) : stringparams/emptystring;
			attribute<string>  bag_woonplaatsnaam  := min(BAG/adres/woonplaats    , domein_rel) == max(BAG/adres/woonplaats    , domein_rel) ? min(BAG/adres/woonplaats    , domein_rel) : stringparams/emptystring;
			attribute<string>  bag_pand_footprint  := min(BAG/adres/pand_footprint, domein_rel) == max(BAG/adres/pand_footprint, domein_rel) ? min(BAG/adres/pand_footprint, domein_rel) : stringparams/emptystring;
			attribute<string>  bag_vbo_oppervlak   := min(BAG/adres/vbo_oppervlak , domein_rel) == max(BAG/adres/vbo_oppervlak , domein_rel) ? min(BAG/adres/vbo_oppervlak , domein_rel) : stringparams/emptystring;
			attribute<string>  bag_pand_bouwjaar   := min(BAG/adres/pand_bouwjaar , domein_rel) == max(BAG/adres/pand_bouwjaar , domein_rel) ? min(BAG/adres/pand_bouwjaar , domein_rel) : stringparams/emptystring;

			attribute<string> PC      := uppercase(values);
			attribute<string> GM_CODE := CBS/gemeente/GM_CODE[point_in_polygon(geometry, /CBS/gemeente/geometry)];
		}
	}

	Template vervang_ongewenste_scheidingstekens
	{
		// begin case parameters
		unit<uint32> domain;
		attribute<string> att (domain);
		// eind case parameters

		parameter<string> VeldScheidingsTeken_niet_ingebruik:= TeGeocoderen/bron/TableChopper/VeldScheidingsTeken = ';' ? ',' : ';';
		attribute<string> resultaat (domain):=
			replace(
				replace(
					att
					,stringparams/space ,stringparams/emptystring
					,stringparams/squote,stringparams/emptystring
					,stringparams/tab   ,stringparams/emptystring
					,stringparams/point ,stringparams/emptystring
				)
				, VeldScheidingsTeken_niet_ingebruik, '_'
			)
		;
	}
	
	template datum_selectie
	{
		// begin case parameters
		unit<uint32>              domain;
		parameter<int32>          prik_datum;
		attribute<bool>           overig_filter (domain);
		// einde case parameters

		attribute<bool> WasGestart   (domain) := domain/meta/BEGINDATUM <= prik_datum;
		attribute<bool> WasBeeindigd (domain) := domain/meta/EINDDATUM  <= prik_datum && domain/meta/EINDDATUM > 0i;

		attribute<bool> conditie     (domain) := ='WasGestart && not(WasBeeindigd) && domain/Meta/status_sel && overig_filter';

		unit<uint32> selectie := select_with_attr_by_org_rel(import, conditie)
		, DialogType = "Map"
		, DialogData = "geometry_mm"
		{
			container meta := collect_attr_by_org_rel(import/meta, selectie, selectie/org_rel);
		}
	}
	
	template meta_src_template // Voor het inlezen van de generieke BAG attributen
	{
		// begin case parameters
		unit<uint32> domain;
		unit<uint8>  statustype;
		// end case parameters

		attribute<string>     STATUS                 (domain);
		attribute<statustype> status_rel             (domain) := rlookup(lowercase(STATUS), statustype/label);
		attribute<bool>       status_sel             (domain) := statustype/IsSelected[status_rel];

		attribute<int32>      BEGINDATUM             (domain);
		attribute<int32>      EINDDATUM              (domain);
		attribute<uint32>     VOORKOMENIDENTIFICATIE (domain);

		attribute<string>     TIJDSTIPREGISTRATIE    (domain);
		attribute<string>     EINDREGISTRATIE        (domain);

		attribute<int32>      DOCUMENTDATUM          (domain);
		attribute<string>     DOCUMENTNUMMER         (domain);

		attribute<bool>       IS_GECONSTATEERD       (domain);
	}
	
}