////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
//                                                                                    //
//              Configuratie voor project: BAG FSS Files > Snapshot                   //
//                                                                                    //
//                              Object Vision 2015                                    //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
// In deze configuratie worden een aantal overzichten gemaakt behorend bij een..    ..//
// snapshot                                                                           //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////

container overzichten
{
	container impl
	{
		unit<uint8> numericlist: nrofrows = 10
		{
			attribute<string> values := string(id(.));
		}
		unit<uint8> alphabetlist: nrofrows = 26
		{
			attribute<string> values:
				['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];
		}

		parameter<string> tab     := '\t';
		parameter<string> newline := '\n';

		unit<uint32> rapport_items := SubTree_PropValues(rapport,'fullname')
		{
			attribute<string> expr := union_data(.,rapport_items_expr/expr);
			attribute<string> name := union_data(.,rapport_items_name/name);
		}
		unit<uint32> rapport_items_expr := SubTree_PropValues(rapport,'expr');
		unit<uint32> rapport_items_name := SubTree_PropValues(rapport,'name');

		unit<uint32> rapport_items_sel  := Subset(strcount(lowercase(rapport_items/FullName),'impl') == 0)
		{
			attribute<string> fullname := rapport_items/fullname[nr_OrgEntity];
			attribute<string> name     := rapport_items/name[nr_OrgEntity];
			attribute<string> expr     := rapport_items/expr[nr_OrgEntity];

			attribute<uint32> level    := strcount(fullname, '/') - 4;

			attribute<uint32> relpos   := strpos(fullname, 'rapport');
			attribute<string> relname  := strlen(expr) >= 1 ? substr(fullname, relpos, strlen(fullname) - relpos) : quote(name);
			attribute<string> label    := strlen(expr) >= 1 ? (level == 0 ? newline : '') + repeat(tab,level) + name + ': ' : '';
		}

		parameter<string> seperator:= ' + ' + quote(newline) + ' + ';
		parameter<string> rapport_tekst_expr :=
			AsList(
				quote(rapport_items_sel/label) + ' + ' + 'string(' + rapport_items_sel/relname + ')'
				, seperator
			);
		parameter<string> rapport_tekst := = rapport_tekst_expr
		,	StorageName = "= SnapshotDir + '/overzicht.txt'"
		,	StorageType = "str";
	}

	container rapport
	{
		parameter<string> BAG_historie      := FSSDir;
		parameter<int32>  BAG_snapshotdatum := prik_datum;
		parameter<int16>  voor_bouwjaar     := bouwjaarafkapgrens;

		parameter<uint32> nr_pand           := #pand/results/unique;

		container types_pand
		{
			parameter<uint32> onderzoek     := sum(uint32(pand/results/unique/meta/IS_ONDERZOEK));
			parameter<uint32> correctie     := sum(uint32(pand/results/unique/meta/IS_CORRECTIE));
			parameter<uint32> officieel     := sum(uint32(pand/results/unique/meta/IS_OFFICIEEL));
		}

		parameter<uint32> nr_vbo            := #vbo/results/unique;

		container types_vbo
		{
			parameter<uint32> onderzoek     := sum(uint32(vbo/results/unique/meta/IS_ONDERZOEK));
			parameter<uint32> correctie     := sum(uint32(vbo/results/unique/meta/IS_CORRECTIE));
			parameter<uint32> officieel     := sum(uint32(vbo/results/unique/meta/IS_OFFICIEEL));
		}

		container statussen
		{
			container impl
			{
				attribute<uint32> count_pand (typeringen/status_pand) := pcount(afleidingen/panden/status_pand_rel);
				attribute<uint32> count_vbo  (typeringen/status_vbo)  := pcount(afleidingen/vbos/status_vbo_rel);

				parameter<int32> afkapgrensbouwjaar_in_prikdatum_notatie:= int32(bouwjaarafkapgrens) * 10000i;

				unit<uint32> pand_gesloopt_voor_bouwjaarafkapgrens := 
					Subset(
						   pand/results/unique/meta/BEGINDATUM  < afkapgrensbouwjaar_in_prikdatum_notatie // voor de bouwjaar afkapgrens
						&& afleidingen/panden/status_pand_rel == 7[typeringen/status_pand]                // is gesloopt
					);
			}
			parameter<string> pand_status_lijst := 
				overzichten/impl/newline + overzichten/impl/tab + overzichten/impl/tab + asList(typeringen/status_pand/label + ': ' + string(impl/count_pand), overzichten/impl/newline + overzichten/impl/tab + overzichten/impl/tab);
			parameter<string> pand_gesloopt_voor_bouwjaarafkapgrens := string(#impl/pand_gesloopt_voor_bouwjaarafkapgrens);
			
			parameter<string> vbo_status_lijst  :=
				overzichten/impl/newline + overzichten/impl/tab + overzichten/impl/tab + asList(typeringen/status_vbo/label + ': ' + string(impl/count_vbo), overzichten/impl/newline + overzichten/impl/tab + overzichten/impl/tab);

		}

		container mogelijke_fouten
		{
			container missing
			{
				parameter<uint32> pand_zonder_geometry   := sum(uint32(isNull(pand/results/unique/geometry_mm)));
				parameter<uint32> vbo_zonder_geometry    := sum(uint32(isNull(vbo/results/unique/geometry_mm)));

				parameter<uint32> pand_zonder_bouwjaar   := sum(uint32(isNull(pand/results/unique/bouwjaar)));
				parameter<uint32> vbo_zonder_oppervlakte := sum(uint32(isNull(vbo/results/unique/oppervlakte)));
			}

			container vreemdewaarden
			{
				parameter<uint32> pand_bouwjaren_voor_1051  := sum(uint32(pand/results/unique/bouwjaar < int16(1051)));
				parameter<uint32> pand_bouwjaren_na_2020    := sum(uint32(pand/results/unique/bouwjaar >= int16(2020)));

				parameter<uint32> vbo_oppervlakte_kleiner_5m2             := sum(uint32(vbo/results/unique/oppervlakte < int32(5)));
				parameter<uint32> vbo_oppervlakte_kleiner_groter_500000m2 := sum(uint32(vbo/results/unique/oppervlakte > int32(500000)));
			}

			container referentieel
			{
				parameter<uint32> vbo_zonder_gereletareed_pand                   := sum(uint32(isNull(rlookup(vbo/results/unique/identificatie          , vbo/results/unique/gerelateerdPand/vbo_id))));
				parameter<uint32> vbo_pand_id_zonder_record_in_pand              := sum(uint32(isNull(rlookup(vbo/results/unique/gerelateerdPand/pand_id, pand/results/unique/identificatie))));
				parameter<uint32> vbo_pand_id_niet_in_gerelateerd_pand_geometrie := sum(uint32(!any(impl/pand_id_is_pand_id_geom,impl/unique_rel)));

				container impl
				{
					attribute<string>             pand_id_geom            (vbo/results/unique/gerelateerdPand) := rjoin(vbo/results/unique/gerelateerdPand/vbo_id, vbo/results/unique/identificatie, vbo/results/unique/pand_id_geom);
					attribute<bool>               pand_id_is_pand_id_geom (vbo/results/unique/gerelateerdPand) := vbo/results/unique/gerelateerdPand/pand_id == pand_id_geom;
					attribute<vbo/results/unique> unique_rel              (vbo/results/unique/gerelateerdPand) := rlookup(vbo/results/unique/gerelateerdPand/vbo_id, vbo/results/unique/identificatie);
				}
			}

			container incorrecte_geometrie
			{
				parameter<uint32> pand_minder_dan_3_punten := sum(uint32(impl/pand_nr_points < 3));

				container impl
				{
					unit<uint32>      pand_pointset                        := Sequence2Points(pand/results/unique/geometry_mm);
					attribute<uint32> pand_nr_points (pand/results/unique) := max(pand_pointset/ordinal, pand_pointset/SequenceNr) + 1;
				}
			}
		}
	}
}