////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
//                                                                                    //
//              Configuratie voor project: BAG FSS Files > Snapshot                   //
//                                                                                    //
//                              Object Vision 2015                                    //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
// In deze configuratie worden een aantal afleidingen geconfigureerd die aan een......//
// snapshot worden toegevoegd.                                                        //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////

container afleidingen
{
	unit<uint32> panden := Pand/results/unique
	{
		attribute<typeringen/status_pand> status_pand_rel := rlookup(lowercase(panden/meta/status), typeringen/status_pand/label);

		container hoogte
		{
			unit<float32> meter := baseUnit('m', float32);
			parameter<meter> verdiepingshoogte := 2.8[meter];
			
			container MakeFSS
			{
				unit<uint32> OHN_csv
				:	StorageName     = "%SourceDataDir%/PblPrivData/OHN/BAG_pand_hoogte.csv"
				,	StorageType     = "gdal.vect"
				,	StorageReadOnly = "true";
		
				unit<uint32> OHN_make_fss:= OHN_csv
				,	StorageName = "%SourceDataDir%/PblPrivData/OHN/BAG_pand_hoogte.fss"
				{
					attribute<string>  pand_id:= OHN_csv/identificatie;
					attribute<meter> hoogte := value(OHN_csv/mean, meter);
				}
			}
			unit<uint32> OHN
			:	StorageName = "%SourceDataDir%/PblPrivData/OHN/BAG_pand_hoogte.fss"
			,	StorageReadOnly = "true"
			{
				attribute<string>  pand_id;
				attribute<meter> hoogte;
			}
			attribute<meter>  pand_hoogte (..):= rjoin(panden/identificatie,OHN/pand_id, OHN/hoogte);
			attribute<uint8>  nr_bouwlagen(..):= uint8(roundup(pand_hoogte / verdiepingshoogte));
		}

		container geometrie
		{
			container results
			{
				attribute<uint32>        nr_buurpanden    (...) := functioneel_pand/NeighbourCount[invert(functioneel_pand/nr_OrgEntity)]; 
				attribute<type_woonpand> type_woonpand_rel(...) := functioneel_pand/type_woonpand_rel[invert(functioneel_pand/nr_OrgEntity)];
			}

			unit<uint8> type_woonpand: nrofrows = 6
			{
				attribute<string> label:    ['geen woonpand','vrijstaand','twee onder 1 kap','hoekwoning','tussenwoning','meergezinspand'], DialogType = "LabelText";
				attribute<string> name := replace(label, ' ', '_');
				container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
			}
			
			container extents
			{
				attribute<geometries/rdc_mm> NW (...) := lower_bound(panden/geometry_mm);
				attribute<geometries/rdc_mm> SE (...) := upper_bound(panden/geometry_mm);
				attribute<int32> X_ext          (...) := PointCol(SE) - PointCol(NW);
				attribute<int32> Y_ext          (...) := PointRow(SE) - PointRow(NW);
			}

			unit<uint32> functioneel_pand := subset(panden/vbo_count > 0 && extents/X_ext < 10000000i && extents/Y_ext < 10000000i), DialogType = "Map", DialogData = "geometry_mm"
			{
				attribute<geometries/rdc_mm> geometry_mm(poly) := panden/geometry_mm[nr_OrgEntity];
				attribute<geometries/rdc_mm> NW := lower_bound(geometry_mm);
				attribute<geometries/rdc_mm> SE := upper_bound(geometry_mm);
				
				// results collection
				attribute<uint32> NeighbourCount  := pcount(unique_neighbour_pair/F1) + pcount(unique_neighbour_pair/F2);
				attribute<bool>   HasOneNeighbour := NeighbourCount == 1;
				attribute<bool>   IsSemiAttached  := HasOneNeighbour &&
					HasOneNeighbour[
						MakeDefined(
							unique_neighbour_pair/F2[invert(unique_neighbour_pair/F1)], 
							unique_neighbour_pair/F1[invert(unique_neighbour_pair/F2)]
						)
					];

				attribute<uint32> nr_woning := sum(uint32(vbo/results/unique/gebruiksdoelen/woon), vbo/results/unique/pand_rel)[nr_OrgEntity];

				attribute<type_woonpand> type_woonpand_rel :=
				  nr_woning == 0      ? type_woonpand/V/geen_woonpand
				: nr_woning >  1      ? type_woonpand/V/meergezinspand
				: NeighbourCount == 0 ? type_woonpand/V/vrijstaand
				: HasOneNeighbour
				   ? IsSemiAttached 
					   ? type_woonpand/V/twee_onder_1_kap 
					   : type_woonpand/V/hoekwoning
				: type_woonpand/V/tussenwoning
				;
			}

			parameter<uint32> nr_x :=  7;
			parameter<uint32> nr_y := 13;
			parameter<Float64> inflate_size := 200.0;
			
			unit<uint32> rectangle := range(uint32, 0, nr_x * nr_y)
			{
				attribute<uint32> seq_y := id(.) / nr_x;
				attribute<uint32> seq_x := id(.) % nr_x;
				attribute<string> name := 'R'+string(seq_y)+'_C'+string(seq_x);

				parameter<uint32> size_x := uint32(pointcol(BoundRange(geometries/rdc_mm))) / uint32(nr_x);
				parameter<uint32> size_y := uint32(pointrow(BoundRange(geometries/rdc_mm))) / uint32(nr_y);

				attribute<uint32> min_x := uint32(pointcol(lowerbound(geometries/rdc_mm))) + seq_x * size_x;
				attribute<uint32> max_x := min_x + size_x;
				attribute<uint32> min_y := uint32(pointrow(lowerbound(geometries/rdc_mm))) + seq_y * size_y;
				attribute<uint32> max_y := min_y + size_y;
			}
			container rectangles := for_each_ne(rectangle/name, 'connect_neighbours('+string(ID(rectangle))+')');

			template connect_neighbours
			{
				// begin case parameters
				parameter<rectangle> rectangle_sel;
				// end case parameters
			
				unit<uint32> domain := 
					subset(
						uint32(PointCol(functioneel_pand/NW)) <= rectangle/max_x[rectangle_sel]
					&&	uint32(PointRow(functioneel_pand/NW)) <= rectangle/max_y[rectangle_sel]
					&&	uint32(PointCol(functioneel_pand/SE)) >= rectangle/min_x[rectangle_sel]
					&&	uint32(PointRow(functioneel_pand/SE)) >= rectangle/min_y[rectangle_sel]
					)
					,	DialogType = "Map", DialogData = "geometry"
				{
					attribute<geometries/rdc_mm> geometry_mm(poly) := functioneel_pand/geometry_mm[nr_OrgEntity];
				}
//				attribute<geometries/rdc_mm> grens_mm(domain, polygon) := domain/geometry[geometries/rdc_mm];
				attribute<geometries/rdc_mm> i4HV_mm (domain, polygon) := polygon_I4HV (domain/geometry_mm, inflate_size);

				unit<uint32> neighbours:= polygon_connectivity(i4HV_mm)
				{
					attribute<upoint> coded_pair := point(domain/nr_OrgEntity[F1], domain/nr_OrgEntity[F2]);
					
					// nice to see
					attribute<geometries/rdc_mm> joint(.,arc):=
						points2sequence_ps(
							union_data(Combine(., bool), centroid(domain/geometry_mm)[F1], centroid(domain/geometry_mm)[F2]),
							union_data(Combine(., bool), ID(.), ID(.))
						);
				}
				
				// results collection
				unit<uint32> unique_neighbour_pair := unique(neighbours/coded_pair), FreeData = "False", DialogType = "Map", DialogData = "joint"
				{
					attribute<functioneel_pand> F1 := pointrow(values)[functioneel_pand];
					attribute<functioneel_pand> F2 := pointcol(values)[functioneel_pand];
					
					// nice to see
					attribute<geometries/rdc_mm> joint(.,arc):=
						points2sequence_ps(
							union_data(Combine(., bool), centroid(functioneel_pand/geometry_mm)[F1], centroid(functioneel_pand/geometry_mm)[F2]),
							union_data(Combine(., bool), ID(.), ID(.))
						);
				}
				// Additional info for one rectangle, should not be used for final derivations
				attribute<uint32> NeighbourCount (domain) := (pcount(unique_neighbour_pair/F1) + pcount(unique_neighbour_pair/F2))[domain/nr_OrgEntity];
			}
			unit<uint32> neighbour_pair := ='union_unit('+AsItemList('rectangles/'+rectangle/name+'/neighbours')+')'
			{
				attribute<upoint> coded_pair := ='union_data(., '+AsItemList('rectangles/'+rectangle/name+'/neighbours/coded_pair')+')';
			}
			unit<uint32> unique_neighbour_pair := unique(neighbour_pair/coded_pair), DialogType = "Map", DialogData = "joint"
			{
				attribute<functioneel_pand> F1 := pointrow(values)[functioneel_pand];
				attribute<functioneel_pand> F2 := pointcol(values)[functioneel_pand];
				
				// nice to see
				attribute<geometries/rdc_mm> joint(.,arc):=
					points2sequence_ps(
						union_data(Combine(., bool), centroid(functioneel_pand/geometry_mm)[F1], centroid(functioneel_pand/geometry_mm)[F2]),
						union_data(Combine(., bool), ID(.), ID(.))
					);
			}
		}
	}

	unit<uint32> vbos := vbo/results/unique
	{
		attribute<typeringen/status_vbo> status_vbo_rel := rlookup(lowercase(vbos/meta/status), typeringen/status_vbo/label);
	}
	
	unit<uint32> nummeraanduidingen := nummeraanduiding/results/unique
	{
		attribute<typeringen/status_nummeraanduiding> status_nummeraanduiding_rel := rlookup(lowercase(nummeraanduidingen/meta/status), typeringen/status_nummeraanduiding/label);
	}
}