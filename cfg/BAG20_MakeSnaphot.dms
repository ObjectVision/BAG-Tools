////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
//                                                                                    //
//              Configuratie voor project: BAG 2.0 XML bronfiles > FSS                //
//                                                                                    //
//                              Object Vision 2023                                    //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
// Met deze configuratie kan uit een historische BAG database (in FSS formaat)        //
// een snapshot op een bepaalde datum gegenereerd worden (ook in FSS formaat)         //
//                                                                                    //
// De snapshot kan ook voor een ruimtelijke selectie gemaakt worden                   //
//                                                                                    //
// Voor de BAG object tabellen geldt dat in resultaat van de snapshot                 //
// de identificatie attributen uniek zijn (kandidaat primaire sleutel)                //
//                                                                                    //
// Tevens kunnen een aantal extra attributen op het snapshot moment afgeleid:         //
// 1) woonpandtypering                                                                //
// 2) pandhoogte obv PHN (afgeleid van AHN3). Deze afleiding is optioneel.            //
//                                                                                    //
// Voor meer informatie, zie:                                                         //
// https://github.com/ObjectVision/BAG-Tools/wiki/BAG20-MakeSnapshot                  //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////

container BAG20_MakeSnapshot: IntegrityCheck = "GeoDMSVersion() >= 8.08005" // GeoDMS version should be 8.81 or later
{ 
	// te configureren
	parameter<string> BAG_Date            := '20230113';
	parameter<string> Snapshot_Date_Input := '20190101';
	//
	parameter<string> FSSDir              := '%SourceDataDir%/BAG/' + BAG_Date + '/fss';
	// parameter<string> FSSDir              := 'D:/SourceData_backup/BAG/' + BAG_Date + '/fss';
	// parameter<string> FSSDir              := 'E:/SourceData/BAG20/' + BAG_Date + '/fss';

	// parameter<string> SnapshotBaseDir     := '%SourceDataDir%/BAG20/snapshots.ext';
	parameter<string> SnapshotBaseDir     := '%SourceDataDir%/BAG/snapshots.ext';

	parameter<string> Snapshot_Date_Batch := expand(., '%ENV:snapshot_date_env%');
	parameter<string> Snapshot_Date       := replace(Snapshot_Date_Batch, 'ENV:snapshot_date_env', Snapshot_Date_input);

	parameter<string>  FileNeeded         := expand(., FSSDir) + '/pand/nr_fss.csv';
	parameter<bool>    isValidFSSDir      := ExistingFile('missing', FileNeeded) == FileNeeded;

	container snapshots
	{
		//                                                                                    snapshot date                     ,geo sel,status sel,strange values sel,with pandhoogte,format , met WP typeringen)
		container nl_status_sel_with_strangevalues_no_height_fss        := ='MakeSnapshot(' + Snapshot_Date + '[eenheden/datum] ,False  ,True      ,False             ,False          ,''FSS'' , TRUE)';
		container geo_sel_status_sel_with_strangevalues_with_heigth_fss := ='MakeSnapshot(' + Snapshot_Date + '[eenheden/datum] ,True   ,True      ,False             ,True           ,''FSS'' , TRUE)';
		container geo_sel_status_sel_with_strangevalues_no_heigth_fss   := ='MakeSnapshot(' + Snapshot_Date + '[eenheden/datum] ,True   ,True      ,False             ,False          ,''FSS'' , TRUE)';
		container nl_status_all_with_strangevalues_no_heigth_fss        := ='MakeSnapshot(' + Snapshot_Date + '[eenheden/datum] ,False  ,False     ,True              ,False          ,''FSS'' , TRUE)';

		container nl_geoparaat_gpkg                                     := ='MakeSnapshot(' + Snapshot_Date + '[eenheden/datum], False  ,False     ,False             ,False          ,''GPKG'', TRUE)';
		container geosel_geoparaat_gpkg                                 := ='MakeSnapshot(' + Snapshot_Date + '[eenheden/datum], True   ,False     ,False             ,False          ,''GPKG'', TRUE)';
		
		container Ruimtescanner_status_all_zonder_WP                    := ='MakeSnapshot(' + Snapshot_Date + '[eenheden/datum] ,False  ,False     ,False             ,True           ,''FSS'' , FALSE)';
		container Ruimtescanner_status_sel_met_WP                       := ='MakeSnapshot(' + Snapshot_Date + '[eenheden/datum] ,False  ,False     ,False             ,True           ,''FSS'' , TRUE)';
		container Ruimtescanner                                         := Merge_Ruimtescanner_Snapshots_T(Ruimtescanner_status_all_zonder_WP,Ruimtescanner_status_sel_met_WP);
		
		Template Merge_Ruimtescanner_Snapshots_T
		{
			container AllStatus_zonderWP0;
			container StatusSec_metWP0;
			
			container AllStatus_zonderWP := Read_Snapshot_data_T(AllStatus_zonderWP0);
			container StatusSec_metWP    := Read_Snapshot_data_T(StatusSec_metWP0);
			
			parameter<string> SuppliersExprAll := 
				isValidFSSDir
					? 'merge/pand;'
						'merge/vbo;'
						'merge/adres'
					: ''; 

			parameter<string> MaakVolledigeSnapshot_metWPopVoorraadNiveau := 
				isValidFSSDir 
					? 'ready' 
					: 'Folder : ' + expand(., FSSDir) + ' bevat geen volledige set van FSS bestanden'
			,  ExplicitSuppliers = "= SuppliersExprAll";
					
			
			container Merge
			{
				container AllStatus_zonderWP := ../AllStatus_zonderWP/SnapshotData;
				container StatusSec_metWP    := ../StatusSec_metWP/SnapshotData;
				
				parameter<string> SnapshotDir        := SnapshotBaseDir + '/' +string(Snapshot_Date)+ '_RS.new';

				unit<uint32> pand := AllStatus_zonderWP/pand
				,  StorageName = "= SnapshotDir + '/pand.fss'"
				{
					attribute<geometries/rdc_mm>        geometry_mm (poly) := AllStatus_zonderWP/pand/geometry_mm;
					attribute<string>                   identificatie      := AllStatus_zonderWP/pand/identificatie;
					attribute<int16>                    bouwjaar           := AllStatus_zonderWP/pand/bouwjaar;
					attribute<typeringen/type_woonpand> woonpand_type      := rjoin(identificatie, StatusSec_metWP/pand/identificatie, StatusSec_metWP/pand/WOONPAND_TYPE);
					attribute<string>                   status             := AllStatus_zonderWP/pand/meta/status;
					
					attribute<eenheden/cm_uint16>       AHN_hoogte         := AllStatus_zonderWP/pand/AHN_hoogte; 
					attribute<uint16>                   AHN_inwinjaar      := AllStatus_zonderWP/pand/AHN_inwinjaar;
				}
				
				unit<uint32> vbo := AllStatus_zonderWP/vbo
				,  StorageName = "= SnapshotDir + '/vbo.fss'"
				{
					attribute<geometries/rdc_mm>   geometry_mm             := AllStatus_zonderWP/vbo/geometry_mm;
					attribute<string>              identificatie           := AllStatus_zonderWP/vbo/identificatie;
					attribute<int32>               oppervlakte             := AllStatus_zonderWP/vbo/oppervlakte;
					attribute<string>              nummeraanduiding_id     := AllStatus_zonderWP/vbo/nummeraanduiding_id;
					attribute<string>              pand_id                 := AllStatus_zonderWP/vbo/pand_id;
					attribute<string>              status                  := AllStatus_zonderWP/vbo/meta/status;
					
					container gebruiksdoelen := 
						for_each_nedv(
							typeringen/gebruiksdoel_vbo/name
							, 'AllStatus_zonderWP/vbo/gebruiksdoelen/'+typeringen/gebruiksdoel_vbo/name
							, vbo
							, bool
						);
				}
				
				unit<uint32> adres := AllStatus_zonderWP/adres
				,  StorageName = "= SnapshotDir + '/adres.fss'"
				{
					attribute<string>     straatnaam          := AllStatus_zonderWP/adres/straatnaam;
					attribute<string>     postcode            := AllStatus_zonderWP/adres/postcode;
					attribute<int32>      huisnummer          := AllStatus_zonderWP/adres/huisnummer;
					attribute<string>     huisletter          := AllStatus_zonderWP/adres/huisletter;
					attribute<string>     toevoeging          := AllStatus_zonderWP/adres/toevoeging;
					attribute<string>     woonplaatsnaam      := AllStatus_zonderWP/adres/woonplaatsnaam;
					attribute<string>     nummeraanduiding_id := AllStatus_zonderWP/adres/nummeraanduiding_id;
				}
			}
			
			Template Read_Snapshot_data_T
			{
				container SnapshotBron;
				//
				container SnapshotData := SnapshotBron
				{
					unit<uint32> ligplaats := select_afew(Object/ligplaats/Result, const(true,Object/ligplaats/Result))
					{
						container    meta       := relate_attr(Object/ligplaats/Result/meta, ., org_rel);
						unit<uint32> nevenadres := select_afew(Object/ligplaats/Result/nevenadres, const(true,Object/ligplaats/Result/nevenadres));
					}
					
					unit<uint32> standplaats := select_afew(Object/standplaats/Result, const(true,Object/standplaats/Result))
					{
						container    meta       := relate_attr(Object/standplaats/Result/meta, ., org_rel);
						unit<uint32> nevenadres := select_afew(Object/standplaats/Result/nevenadres, const(true,Object/standplaats/Result/nevenadres));
					}
					
					unit<uint32> pand := select_afew(Object/pand/Result, const(true,Object/pand/Result))
					{
						attribute<typeringen/type_woonpand> WOONPAND_TYPE   := Object/pand/Result/woningtype/WOONPAND_TYPE[org_rel];
						container                           meta            := relate_attr(Object/pand/Result/meta, ., org_rel);
						container                           gebruiksdoelen  := relate_attr(Object/pand/Result/gebruiksdoelen, ., org_rel);
						
						attribute<eenheden/cm_uint16>       AHN_hoogte         := Object/pand/Impl/phn/AHN_hoogte[org_rel];
						attribute<uint16>                   AHN_inwinjaar      := Object/pand/Impl/phn/AHN_inwinjaar[org_rel];
					}
					
					unit<uint32> vbo := select_afew(Object/vbo/Result, const(true,Object/vbo/Result))
					{
						container    meta             := relate_attr(Object/vbo/Result/meta, ., org_rel);
						container    gebruiksdoelen   := relate_attr(Object/vbo/Result/gebruiksdoelen, ., org_rel);
						unit<uint32> gerelateerdPand  := select_afew(Object/vbo/Result/gerelateerdPand, const(true,Object/vbo/Result/gerelateerdPand));
						unit<uint32> nevenadres       := select_afew(Object/vbo/Result/nevenadres, const(true,Object/vbo/Result/nevenadres));
					}
					
					unit<uint32> nummeraanduiding := select_afew(Object/nummeraanduiding/Result, const(true,Object/nummeraanduiding/Result))
					{
						container    meta := relate_attr(Object/nummeraanduiding/Result/meta, ., org_rel);
					}
					
					unit<uint32> openbareruimte := select_afew(Object/openbareruimte/Result, const(true,Object/openbareruimte/Result))
					{ 
						container    meta := relate_attr(Object/openbareruimte/Result/meta, ., org_rel);
					}
					
					unit<uint32> woonplaats := select_afew(Object/woonplaats/Result, const(true,Object/woonplaats/Result))
					{
						container    meta := relate_attr(Object/woonplaats/Result/meta, ., org_rel);
					}

					unit<uint32> adres := select_many(Object/afleidingen/adres, const(true, Object/afleidingen/adres));
				}
			}
			
			
		}
	}

	container eenheden
	{
		unit<int32>   datum;
		unit<int16>   jaar;
		unit<int32>   mm        := int32(0.001 * m);
		unit<uint16>  cm_uint16 := uint16(0.01 * m);
		unit<float32> m         := baseunit('m', float32);
	}

	container geometries
	{
		#include <wmts_layer.dms>

		unit<fpoint> rdc_base
		: format     = "EPSG:28992"
		, DialogData = "wmts_layer";
		unit<fpoint> rdc    := range(rdc_base, point(300000f,0f), point(625000f,280000f));
		unit<ipoint> rdc_mm := gridset(rdc, point(0.001,0.001), point(0.0, 0.0), ipoint);
	}

	
	unit<uint32> geo_selectie
	: StorageName     = "%ProjDir%/data/geo_sel.shp"
	, StorageType     = "gdal.vect"
	, StorageReadOnly = "True"
	{
		parameter<string>         Label := 'BredaEO';
		attribute<geometries/rdc> geometry (poly);
	}

	container typeringen
	{
		unit<uint8> type_woonpand: nrofrows = 6
		{
			attribute<string> label : ['geen woonpand','vrijstaand','twee onder 1 kap','hoekwoning','tussenwoning','meergezinspand'], DialogType = "LabelText";
			attribute<string> name  := replace(label, ' ', '_');
			container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
		}

	
		unit<uint8> objecttypes: nrofrows = 7
		{
			attribute<string> name:
			[
				'ligplaats','standplaats','pand','vbo','nummeraanduiding','openbareruimte','woonplaats'
			];
		}

		unit<uint8> gebruiksdoel_vbo: nrofrows = 11
		{
			attribute<string> label:
			[
				'bijeenkomstfunctie','celfunctie','gezondheidszorgfunctie','industriefunctie','kantoorfunctie','logiesfunctie'
				,'onderwijsfunctie','overige gebruiksfunctie','sportfunctie','winkelfunctie','woonfunctie'
			];
			attribute<string> name := replace(replace(label,' ','_'), 'functie','');
		}
		#include<status.dms>
	}

	#include<MakeSnapshot.dms>
	
	#include<ExportSettings.dms>

	template meta_src_template // Voor het inlezen van de generieke BAG attributen
	{
		// begin case parameters
		unit<uint32> domain;
		unit<uint8>  statustype;
		// end case parameters

		attribute<string>     STATUS                 (domain);
		attribute<statustype> status_rel             (domain) := rlookup(lowercase(STATUS), statustype/label);
		attribute<bool>       status_sel             (domain) := statustype/Selected[status_rel];

		attribute<int32>      BEGINDATUM             (domain);
		attribute<int32>      EINDDATUM              (domain);
		attribute<uint32>     VOORKOMENIDENTIFICATIE (domain);

		attribute<string>     TIJDSTIPREGISTRATIE    (domain);
		attribute<string>     EINDREGISTRATIE        (domain);

		attribute<int32>      DOCUMENTDATUM          (domain);
		attribute<string>     DOCUMENTNUMMER         (domain);

		attribute<bool>       IS_GECONSTATEERD       (domain);
	}

	template meta_template // Voor het aggregeren van de generieke BAG attributen
	{
		// begin case parameters
		unit<uint32> src_domain;
		unit<uint32> target_domain;
		// end case parameters

		attribute<string>         Status                 (target_domain) := rjoin(key, impl/selectie/key, src_domain/meta/Status);
		attribute<eenheden/datum> BEGINDATUM             (target_domain) := rjoin(key, impl/selectie/key, src_domain/meta/BEGINDATUM);
		attribute<eenheden/datum> EINDDATUM              (target_domain) := rjoin(key, impl/selectie/key, src_domain/meta/EINDDATUM);
		attribute<uint32>         VOORKOMENIDENTIFICATIE (target_domain) := rjoin(key, impl/selectie/key, src_domain/meta/VOORKOMENIDENTIFICATIE);
		attribute<string>         TIJDSTIPREGISTRATIE    (target_domain) := rjoin(key, impl/selectie/key, src_domain/meta/TIJDSTIPREGISTRATIE);
		attribute<string>         EINDREGISTRATIE        (target_domain) := rjoin(key, impl/selectie/key, src_domain/meta/EINDREGISTRATIE);
		attribute<eenheden/datum> DOCUMENTDATUM          (target_domain) := rjoin(key, impl/selectie/key, src_domain/meta/DOCUMENTDATUM);
		attribute<string>         DOCUMENTNUMMER         (target_domain) := rjoin(key, impl/selectie/key, src_domain/meta/DOCUMENTNUMMER);
		attribute<bool>           IS_GECONSTATEERD       (target_domain) := rjoin(key, impl/selectie/key, src_domain/meta/IS_GECONSTATEERD);
	}

	template meta_write_template // Voor het aggregeren van de generieke BAG attributen
	{
		// begin case parameters
		unit<uint32> domain: DisableStorage = "True";
		container meta_src;
		// end case parameters

		attribute<string>         Status                 (domain) := meta_src/status, DisableStorage = "True";
		attribute<eenheden/datum> BEGINDATUM             (domain) := meta_src/BEGINDATUM ;
		attribute<eenheden/datum> EINDDATUM              (domain) := meta_src/EINDDATUM ;
		attribute<uint32>         VOORKOMENIDENTIFICATIE (domain) := meta_src/VOORKOMENIDENTIFICATIE;
		attribute<string>         TIJDSTIPREGISTRATIE    (domain) := meta_src/TIJDSTIPREGISTRATIE;
		attribute<string>         EINDREGISTRATIE        (domain) := meta_src/EINDREGISTRATIE;
		attribute<eenheden/datum> DOCUMENTDATUM          (domain) := meta_src/DOCUMENTDATUM;
		attribute<string>         DOCUMENTNUMMER         (domain) := meta_src/DOCUMENTNUMMER;
		attribute<bool>           IS_GECONSTATEERD       (domain) := meta_src/IS_GECONSTATEERD, DisableStorage = "True";
	}

	template datum_selectie
	{
		// begin case parameters
		unit<uint32>              domain;
		parameter<eenheden/datum> prik_datum;
		parameter<bool>           overig_filter_actief;
		attribute<bool>           overig_filter (domain) := const(true, domain);
		// einde case parameters

		attribute<bool> WasGestart   (domain) := domain/meta/BEGINDATUM <= prik_datum;
		attribute<bool> WasBeeindigd (domain) := domain/meta/EINDDATUM  <= prik_datum && domain/meta/EINDDATUM > 0i;

		attribute<bool> conditie     (domain) := = 'WasGestart && not(WasBeeindigd) ' +
				(met_status_sel 
					? '&& domain/Meta/status_sel ' 
					: '') +
				(overig_filter_actief 
					? '&& overig_filter' 
					: '');

		unit<uint32> selectie := select_with_attr_by_org_rel(src, conditie)
		, DialogType = "Map"
		, DialogData = "geometry_mm"
		{
			container meta := collect_attr_by_org_rel(src/meta, selectie, selectie/org_rel);
		}

	}

	Template polygon_selectie
	{
		// begin case parameters
		unit<uint32> domain;
		attribute<geometries/rdc_mm> geometry_mm (polygon, domain);
		// end case parameters

		container bbox := bbox_min_max(domain,geometry_mm);

		attribute<geometries/rdc> x_min_y_min (domain) := point(bbox/y_min[eenheden/m], bbox/x_min[eenheden/m], geometries/rdc);
		attribute<geometries/rdc> x_min_y_max (domain) := point(bbox/y_max[eenheden/m], bbox/x_min[eenheden/m], geometries/rdc);
		attribute<geometries/rdc> x_max_y_max (domain) := point(bbox/y_max[eenheden/m], bbox/x_max[eenheden/m], geometries/rdc);
		attribute<geometries/rdc> x_max_y_min (domain) := point(bbox/y_min[eenheden/m], bbox/x_max[eenheden/m], geometries/rdc);
		attribute<geometries/rdc> centroid    (domain) := centroid(geometry_mm)[geometries/rdc];

		attribute<bool> result (domain) :=
			   isDefined(point_in_polygon(x_min_y_min, /geo_selectie/geometry))
			|| isDefined(point_in_polygon(x_min_y_max, /geo_selectie/geometry))
			|| isDefined(point_in_polygon(x_max_y_max, /geo_selectie/geometry))
			|| isDefined(point_in_polygon(x_max_y_min, /geo_selectie/geometry))
			|| isDefined(point_in_polygon(   centroid, /geo_selectie/geometry));
	}

	Template nl_selectie
	{
		// begin case parameters
		unit<uint32> domain;
		// end case parameters

		attribute<bool> result (domain) := const(true, domain);
	}

	Template bbox_min_max
	{
		// begin case parameters
		unit<uint32> domain;
		attribute<geometries/rdc_mm> geometry_mm (polygon, domain);
		// end case parameters

		attribute<geometries/rdc_mm> lowerbound (domain) := lower_bound(geometry_mm);
		attribute<geometries/rdc_mm> upperbound (domain) := upper_bound(geometry_mm);

		attribute<eenheden/mm>       x_min      (domain) := PointCol(lowerbound)[eenheden/mm];
		attribute<eenheden/mm>       x_max      (domain) := PointCol(upperbound)[eenheden/mm];
		attribute<eenheden/mm>       y_min      (domain) := PointRow(lowerbound)[eenheden/mm];
		attribute<eenheden/mm>       y_max      (domain) := PointRow(upperbound)[eenheden/mm];
	}
}
