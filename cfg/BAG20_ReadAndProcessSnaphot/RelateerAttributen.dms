////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
//                                                                                    //
//              Configuratie voor project: BAG 2.0 Read And Process Snapshot          //
//                                                                                    //
//                              Object Vision 2021                                    //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
// Configuratiebestand voor het relateren van BAG attributen tussen BAG objecten      //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////

container RelateerAttributen
{
	unit<uint32> vbo := ReadSnapshot/vbo
	{
		attribute<string>                   identificatie              := ReadSnapshot/vbo/identificatie;

		// Sectie pand: relateer pand informatie aan verblijfsobjecten
		attribute<ReadSnapshot/adres>       pand_rel                   := rlookup(vbo/pand_id_geom, ReadSnapshot/pand/identificatie); // relatie van ieder vbo naar het pand index nummer, op basis van de snapshot data
		attribute<ReadSnapshot/adres>       pand_rel_point_in_polygon  := point_in_polygon(vbo/geometry, ReadSnapshot/pand/geometry); // relatie van ieder vbo naar het adres index nummer, geometrisch bepaald
		attribute<eenheden/jaar>            pand_bouwjaar              := ReadSnapshot/pand/bouwjaar[pand_rel];
		attribute<typeringen/type_woonpand> pand_woonpand_type         := ReadSnapshot/pand/WOONPAND_TYPE[pand_rel];

		// Sectie adres: relateer adres informatie aan verblijfsobjecten
		attribute<ReadSnapshot/adres>       adres_rel                  := rlookup(vbo/nummeraanduiding_id, ReadSnapshot/adres/nummeraanduiding_id); // relatie van ieder vbo naar het adres index nummer.

		attribute<string>                   straatnaam                 := ReadSnapshot/adres/straatnaam[adres_rel]; // zoek op basis van de relatie het gewenste adresveld op
		attribute<string>                   postcode                   := ReadSnapshot/adres/postcode[adres_rel];
		attribute<int32>                    huisnummer                 := ReadSnapshot/adres/huisnummer[adres_rel];
		attribute<string>                   huisletter                 := ReadSnapshot/adres/huisletter[adres_rel];
		attribute<string>                   toevoeging                 := ReadSnapshot/adres/toevoeging[adres_rel];
		attribute<string>                   woonplaatsnaam             := ReadSnapshot/adres/woonplaatsnaam[adres_rel];

		attribute<postcode6>                postcode6_rel              := rlookup(postcode, postcode6/values);
	}

	unit<uint32> pand := ReadSnapshot/pand
	{
		attribute<string>                   identificatie              := ReadSnapshot/pand/identificatie;
		attribute<eenheden/m2>              pand_oppervlakte           := area(ReadSnapshot/pand/geometry, eenheden/m2); // bepaal de oppervlakte van een pand op basis van zijn geometrie

		// Sectie vbo: relateer pand informatie aan verblijfsobjecten
		attribute<uint32>                   aantal_vbo                 := pcount(vbo/pand_rel); // tel het aantal verblijfsobjecten per pand

		attribute<eenheden/m2_int32>        sum_vbo_oppervlakte        := sum(ReadSnapshot/vbo/oppervlakte, vbo/pand_rel);                                  // sommeer de oppervlaktes van de verblijfsobjecten per pand
		attribute<eenheden/percentage>      perc_vbo_opp_pand_opp      := 100[eenheden/percentage] * (sum_vbo_oppervlakte[eenheden/m2] / pand_oppervlakte); // deel de sum_vbo_oppervlakte op de pand_oppervlakte, let op de conversie van de values unit.

		container aantal_vbo_per_gebruiksdoel := for_each_nedv(
			 typeringen/gebruiksdoel_vbo/name 
			,'sum(ReadSnapshot/vbo/gebruiksdoelen/' + typeringen/gebruiksdoel_vbo/name + ' ? 1 : 0 , vbo/pand_rel)'
			, pand
			, uint32); // tel voor ieder gebruiksdoel hoeveel verblijfsobjecten voorkomen in het pand.

		container sum_oppervlakte_vbo_per_gebruiksdoel := for_each_nedv(
			 typeringen/gebruiksdoel_vbo/name 
			,'sum(ReadSnapshot/vbo/gebruiksdoelen/' + typeringen/gebruiksdoel_vbo/name + ' ? ReadSnapshot/vbo/oppervlakte : 0[eenheden/m2_int32] , vbo/pand_rel)'
			, pand
			, eenheden/m2_int32); // sommeer voor ieder gebruiksdoel de verblijfsobject oppervlakte in het pand.

		// Sectie adres: relateer adres informatie aan panden
		attribute<string>                   woonplaatsnaam             := first(vbo/woonplaatsnaam, vbo/pand_rel);                                                    // Als een BAG pand altijd in 1 woonplaats ligt, maakt de wijze van aggregeren niet uit.
		attribute<string>                   meest_voorkomende_postcode := postcode6/values[modus(vbo/postcode6_rel, vbo/pand_rel)];                                   // De modus bepaalt de meest voorkomende, deze werkt niet direct strings, dus maken we eerst een code/stamtabel postcode6.
		attribute<string>                   unieke_postcodes           := AsList(pand_postcode6/postcode               , ', ' , pand_postcode6/pand_rel);             // Hiervoor hebben we eerst een relatie tabel van unieke combinatie van panden en postcodes nodig, te weten: pand_postcode6.
		attribute<string>                   adresranges                := AsList(pand_straatnaam_woonplaats/adres_range, ', ' , pand_straatnaam_woonplaats/pand_rel); // Ook hier hebben we een relatie tabel met unieke combinaties van straatnamen, woonplaatsen en panden voor nodig 
	}


	// Ten behoeve van de adres informatie per pand
	unit<uint32> postcode6 := unique(vbo/postcode); // codetabel met unieke postcodes

	unit<uint32> pand_postcode6 := unique(string(vbo/pand_rel) + '_' + string(vbo/postcode6_rel)) // relatietabel met unieke combinaties van panden en postcodes
	{
		attribute<pand>      pand_rel      := left(values,  strpos(values, '_'))[pand]         ; // splits de unieke values string op en bepaal het gedeelte voor de pand_rel;
		attribute<postcode6> postcode6_rel := substr(values,strpos(values, '_') + 1)[postcode6]; // splits de unieke values string op en bepaal het gedeelte voor de postcode6_rel;
		attribute<string>    postcode      := postcode6/values[postcode6_rel];
	}

	unit<uint32> pand_straatnaam_woonplaats := unique(string(vbo/pand_rel) + '_' + vbo/straatnaam + '_' + vbo/woonplaatsnaam) // relatietabel met unieke combinaties van panden, woonplaatsen en straatnamen
	{
		attribute<pand>      pand_rel              := left(values,  strpos(values, '_'))[pand]         ; // splits de unieke values string op en bepaal het gedeelte voor de pand_rel;
		attribute<string>    straatnaam_woonplaats := replace(substr(values,strpos(values, '_') + 1), '_', ' in ');

		attribute<int32>     min_huisnummer        := min(vbo/huisnummer, pand_woonplaats_straatnaam_rel);
		attribute<int32>     max_huisnummer        := max(vbo/huisnummer, pand_woonplaats_straatnaam_rel);

		attribute<string>    adres_range           := min_huisnummer == max_huisnummer
			? straatnaam_woonplaats + ' ' + string(min_huisnummer)
			: straatnaam_woonplaats + ' ' + string(min_huisnummer) + ' tot ' + string(max_huisnummer);

		attribute<pand_straatnaam_woonplaats> pand_woonplaats_straatnaam_rel (vbo) := rlookup(string(vbo/pand_rel) + '_' + vbo/straatnaam + '_' + vbo/woonplaatsnaam, pand_straatnaam_woonplaats/values);
	}
}
