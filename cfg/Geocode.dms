////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
//                                                                                    //
//                     Configuratie voor BAG Geocodeer Module                         //
//                                                                                    //
//          Vrije Universiteit Amsterdam | SPINlab / Object Vision 2023               //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
//   Configuratiebestande op basis van een beslisboom XY coordinaten met relevante    //
//   meta informatie te koppelen aan een bronbestand met adresvelden                  //
//                                                                                    //
// De koppeling vindt plaats aan de BAG adressen en verschillende aggregaties daarvan //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////

container Geocode: IntegrityCheck = "GeoDMSVersion() >= 8.08005" // GeoDMS version should be 8.81 or later
{
	unit<fpoint> point_rd := range(fpoint, point(300000f,0f), point(625000f,280000f));

	container stringparams
	{
		parameter<string> space              := ' ';
		parameter<string> tab                := '\t';
		parameter<string> squote             := '\''';
		parameter<string> point              := '.';
		parameter<string> underscore         := '_';
		parameter<string> emptystring        := '';
		parameter<string> newline            := '\n';
		parameter<string> legehuistoevoeging := 'geen';
	}

	#include<niveau.dms>

	unit<uint32> stap := select_with_attr_by_cond(niveau, niveau/code > int8(0))
	{
		attribute<string> expr_key := replace(volgorde,', ',' + ''_'' + ');
	}

	#include<BAG.dms>
	#include<CBS.dms>
	//#include<NVM.dms>

	#include<vervangingen.dms>
	#include<templates.dms>

	container TeGeocoderen
	{
		#include<bron.dms>

		unit<uint32> bronDomein := bron/TableChopper/Domein
		{
			attribute<point_rd> geometry     := koppel_aan_bag_aggregaties/geometry;

			attribute<string> straatnaam     := bron/straatnaam/resultaat;
			attribute<string> postcode       := bron/postcode/resultaat;
			attribute<string> huisnummer     := bron/huisnummer/resultaat;
			attribute<string> huistoevoeging := MakeDefined(bron/huistoevoeging/resultaat, 'geen');
			attribute<string> woonplaatsnaam := bron/woonplaatsnaam/resultaat;
			attribute<string> postcode5      := bron/postcode5/resultaat;
			attribute<string> postcode4      := bron/postcode4/resultaat;

			container keys :=
				for_each_nedv(
					 stap/naam
					,stap/expr_key
					,bronDomein
					,string
				);
		}

		container koppel_aan_bag_aggregaties
		{
			container rlookups :=
				for_each_nedv(
					 stap/naam
					,'rlookup(bronDomein/keys/' + stap/naam + ', BAG/aggregaties/' + stap/naam + '/domein/values)'
					,bronDomein
					,uint32
				)
			, KeepData = "True";

			parameter<string> niveau_subexpr := AsItemList('case(isDefined(rlookups/'+ stap/naam  + '), ' + string(ID(stap)) + '[niveau])');
			attribute<niveau> niveau_rel (bronDomein) := = 'switch(' + niveau_subexpr + ', rlookup(int8(-1), niveau/code))';
			attribute<int8>   niveau_code(bronDomein) := niveau/code[niveau_rel];

			parameter<string> X_sub_expr := AsItemList('case(niveau_code == int8(' + string(stap/code) + '), BAG/aggregaties/' + stap/naam  + '/domein/meanX[rlookups/' + stap/naam  + '])');

			attribute<float32> X                   (bronDomein) := = 'switch(' + X_sub_expr + ', 0f / 0f )';
			attribute<float32> Y                   (bronDomein) := = 'switch(' + replace(X_sub_expr,'meanX','meanY')     + ', 0f / 0f )';
			attribute<uint32>  count               (bronDomein) := = 'switch(' + replace(X_sub_expr,'meanX','countX')    + ', 0  / 0  )';
			attribute<float32> var                 (bronDomein) := = 'switch(' + replace(X_sub_expr,'meanX','var')       + ', 0f / 0f )';

			attribute<string>  nummeraanduiding_id (bronDomein) := = 'switch(' + replace(X_sub_expr,'meanX','nummeraanduiding_id') + ', ' + quote(stringparams/emptystring) + ')';

			attribute<string>  bag_postcode        (bronDomein) := = 'switch(' + replace(X_sub_expr,'meanX','bag_postcode')        + ', ' + quote(stringparams/emptystring) + ')';
			attribute<string>  bag_straatnaam      (bronDomein) := = 'switch(' + replace(X_sub_expr,'meanX','bag_straatnaam')      + ', ' + quote(stringparams/emptystring) + ')';
			attribute<string>  bag_huisnummer      (bronDomein) := = 'switch(' + replace(X_sub_expr,'meanX','bag_huisnummer')      + ', ' + quote(stringparams/emptystring) + ')';
			attribute<string>  bag_huisletter      (bronDomein) := = 'switch(' + replace(X_sub_expr,'meanX','bag_huisletter')      + ', ' + quote(stringparams/emptystring) + ')';
			attribute<string>  bag_toevoeging      (bronDomein) := = 'switch(' + replace(X_sub_expr,'meanX','bag_toevoeging')      + ', ' + quote(stringparams/emptystring) + ')';
			attribute<string>  bag_woonplaatsnaam  (bronDomein) := = 'switch(' + replace(X_sub_expr,'meanX','bag_woonplaatsnaam ') + ', ' + quote(stringparams/emptystring) + ')';

			attribute<point_rd> geometry           (bronDomein) := point(X,Y,point_rd);

			container buurt
			{
				attribute<cbs/buurt> buurt_rel (bronDomein) := point_in_polygon(geometry, fpolygon(cbs/buurt/Geometry));
				attribute<string>    code      (bronDomein) := cbs/buurt/bu_code[buurt_rel];
				attribute<string>    naam      (bronDomein) := cbs/buurt/bu_naam[buurt_rel];
			}
			container wijk
			{
				attribute<cbs/wijk> wijk_rel (bronDomein) := point_in_polygon(geometry, fpolygon(cbs/wijk/Geometry));
				attribute<string>   code     (bronDomein) := cbs/wijk/wk_code[wijk_rel];
				attribute<string>   naam     (bronDomein) := cbs/wijk/wk_naam[wijk_rel];
			}
			container gemeente
			{
				attribute<cbs/gemeente> gemeente_rel (bronDomein) := point_in_polygon(geometry, fpolygon(cbs/gemeente/Geometry));
				attribute<string>       code         (bronDomein) := cbs/gemeente/gm_code[gemeente_rel];
				attribute<string>       naam         (bronDomein) := cbs/gemeente/gm_naam[gemeente_rel];
			}
			/*
			container nvm_regio
			{
				attribute<nvm/regio>    nvmreg_rel   (bronDomein) := point_in_polygon(geometry, fpolygon(nvm/regio/Geometry));
				attribute<string>       naam         (bronDomein) := nvm/regio/regionaam[nvmreg_rel];
				attribute<string>       code         (bronDomein) := nvm/regio/regioid[nvmreg_rel];
			}
			container nvm_afdeling
			{
				attribute<nvm/afdeling> nvmafd_rel   (bronDomein) := point_in_polygon(geometry, fpolygon(nvm/afdeling/Geometry));
				attribute<string>       naam         (bronDomein) := nvm/afdeling/afdeling[nvmafd_rel];
				attribute<string>       code         (bronDomein) := nvm/afdeling/afdid[nvmafd_rel];
			}
			unit<uint32> nvm_afd_niveau := combine(nvm/afdeling, niveau) // TODO: entiteit definitie verplaatsen naar rapportage template of generieke stamtabel container
			{
				attribute<string> Label := nvm/afdeling/afdeling[nr_1] + ' - ' + niveau/naam[nr_2];
				// vanaf hier specifiek per brondata set of verplaatsen naar een rapportage template
				attribute<.> rel(bronDomein) := combine_data(., nvm_afdeling/nvmafd_rel, niveau_rel); 
				attribute<uint32> count := pcount(rel);
			}*/

			container bag_adres_velden
			{
				attribute<string>  bag_key_replaced (bronDomein) := replace(bag_key, '_',';');
				attribute<string>  postcode         (bronDomein) := ReadElems(bag_key_replaced, string, const(0,bronDomein));
				attribute<string>  straatnaam       (bronDomein) := ReadElems(bag_key_replaced, string, postcode/readPos);
				attribute<string>  huisnummer       (bronDomein) := ReadElems(bag_key_replaced, string, straatnaam/readPos);
				attribute<string>  huistoevoeging   (bronDomein) := ReadElems(bag_key_replaced, string, huisnummer/readPos);
				attribute<string>  woonplaatsnaam   (bronDomein) := ReadElems(bag_key_replaced, string, huistoevoeging/readPos);
			}

			unit<uint32> geen_nummeraanduiding := select_with_attr_by_org_rel(koppel_aan_bag_aggregaties, strlen(trim(TeGeocoderen/koppel_aan_bag_aggregaties/nummeraanduiding_id)) < 2)
			{
				attribute<string> bron_adres         := TeGeocoderen/bron/TableChopper/BodyLines[org_rel];
			}

			container metainformatie
			{
				attribute<niveau>  niveau_rel            (bronDomein) := ../niveau_rel;
				attribute<uint32>  niveau_count          (niveau)     := pcount(niveau_rel);
				attribute<float32> gemiddelde_aantal     (niveau)     := MakeDefined(mean(float32(count), niveau_rel),0f);
				attribute<float32> gemiddelde_variantie  (niveau)     := MakeDefined(mean(var, niveau_rel),0f);
				attribute<float32> percentage            (niveau)     := float32(niveau_count) / float32(#(bronDomein)) * 100f;
				attribute<float32> percentage_cumulatief (niveau)     := cumulate(percentage);
				attribute<string>  aggregatie_type       (niveau)     := /niveau/aggtype == 0b ? 'mean' : 'median';

				container bestand
				{
					parameter<string> Kopregel := 'code;omschrijving;aantal;gemiddeld aantal adressen;gemiddelde variantie;percentage;percentage cumulatief;aggregatie type';
					parameter<string> Body     := 
						AsList(
							   string(niveau/code) + ';' + replace(niveau/volgorde,',',' ') + ';' + string(niveau_count)  + ';' + 
							   string(gemiddelde_aantal) + ';' +  string(gemiddelde_variantie) + ';' + string(percentage) + ';' +  string(percentage_cumulatief) + ';' + 
							   string(aggregatie_type)
							,stringparams/newline
						);
					
					parameter<string> resultaat := Kopregel + stringparams/newline + Body
					, StorageName = "%LocalDataProjDir%/resultaat_meta.csv"
					, StorageType = "str";
				}

				unit<uint32> buurt := CBS/buurt
				{
					attribute<uint32> nr_BAG_adressen            := pcount(BAG/adres/buurt_rel);
					attribute<uint32> nr_geogecodeerde_adressen  := pcount(TeGeocoderen/koppel_aan_bag_aggregaties/buurt/buurt_rel);

					parameter<string> Kopregel := 'buurt_code;buurt_naam;aantal BAG adressen;aantal gegeocodeerde adressen';
					parameter<string> Body     := AsList(BU_CODE + ';' + BU_NAAM + ';' + string(nr_BAG_adressen) + ';' + string(nr_geogecodeerde_adressen), stringparams/newline);

					parameter<string> resultaat := Kopregel + stringparams/newline + Body
					, StorageName = "%LocalDataProjDir%/resultaat_per_buurt.csv"
					, StorageType = "str";
				}

				unit<uint32> wijk := CBS/wijk
				{
					attribute<uint32> nr_BAG_adressen            := pcount(BAG/adres/wijk_rel);
					attribute<uint32> nr_geogecodeerde_adressen  := pcount(TeGeocoderen/koppel_aan_bag_aggregaties/wijk/wijk_rel);
					
					parameter<string> Kopregel := 'wijk_code;wijk_naam;aantal BAG adressen;aantal gegeocodeerde adressen';
					parameter<string> Body     := AsList(WK_CODE + ';' + WK_NAAM + ';' + string(nr_BAG_adressen) + ';' + string(nr_geogecodeerde_adressen), stringparams/newline);

					parameter<string> resultaat := Kopregel + stringparams/newline + Body
					, StorageName = "%LocalDataProjDir%/resultaat_per_wijk.csv"
					, StorageType = "str";
				}

				unit<uint32> gemeente := CBS/gemeente
				{
					attribute<uint32> nr_BAG_adressen            := pcount(BAG/adres/gemeente_rel);
					attribute<uint32> nr_geogecodeerde_adressen  := pcount(TeGeocoderen/koppel_aan_bag_aggregaties/gemeente/gemeente_rel);
					
					parameter<string> Kopregel := 'gem_code;gem_naam;aantal BAG adressen;aantal gegeocodeerde adressen';
					parameter<string> Body     := AsList(GM_CODE + ';' + GM_NAAM + ';' + string(nr_BAG_adressen) + ';' + string(nr_geogecodeerde_adressen), stringparams/newline);

					parameter<string> resultaat := Kopregel + stringparams/newline + Body
					, StorageName = "%LocalDataProjDir%/resultaat_per_gemeente.csv"
					, StorageType = "str";
				}

				/*unit<uint32> nvm_afd:= nvm/afdeling
				{
					attribute<uint32> nr_BAG_adressen            := pcount(BAG/adres/nvmafd_rel);
					attribute<uint32> nr_geogecodeerde_adressen  := pcount(TeGeocoderen/koppel_aan_bag_aggregaties/nvm_afdeling/nvmafd_rel);
		
					parameter<string> NiveauLinesExpr := 
						'add('+
								AsItemList(Quote(';')+'+string(nvm_afd_niveau/count[combine_data(nvm_afd_niveau, ID(nvm_afd), '+String(ID(niveau))+'[niveau])])')
							+')';
					attribute<string> NiveauLines := = NiveauLinesExpr;

					parameter<string> Kopregel  := 'afd_id;afd_naam;aantal BAG adressen;aantal gegeocodeerde adressen'+AsList(';C'+String(Niveau/code),'');
					attribute<string> BodyLines := 
							AFDID + ';' + 
							AFDELING + ';' + 
							string(nr_BAG_adressen) + ';' + 
							string(nr_geogecodeerde_adressen) +
							NiveauLines
						;

					parameter<string> resultaat:= Kopregel + stringparams/newline + AsList(BodyLines, stringparams/newline)
					, StorageName = "%LocalDataProjDir%/resultaat_per_nvmafdeling.csv"
					, StorageType = "str";
				}*/
			}
		}
	}

	container export
	{
		unit<uint32> extra_velden: nrofrows = 12
		{
			attribute<string> naam     :  ['niveau_code','X','Y','count','var','nummeraanduiding_id','bag_postcode','bag_straatnaam','bag_huisnummer','bag_huisletter','bag_toevoeging','bag_woonplaatsnaam'];
			attribute<string> ItemNaam := 'TeGeocoderen/koppel_aan_bag_aggregaties/' + naam;
		}

		container impl
		{
			parameter<string> ScheidingsTeken := TeGeocoderen/bron/TableChopper/VeldScheidingsTeken;
			parameter<string> Kopregel        := TeGeocoderen/bron/TableChopper/KopRegel + ScheidingsTeken + 'buurt_code'+ ScheidingsTeken +'wijk_code'+ ScheidingsTeken +'gemeente_code'+ ScheidingsTeken +'nvmafd_code' + ScheidingsTeken + AsList(export/extra_velden/naam, ScheidingsTeken);

			attribute<string> BodyExtra (TeGeocoderen/bronDomein) := = AsList(
				'MakeDefined(String(' + export/extra_velden/ItemNaam + '),stringparams/emptystring)'
			,	' + ' + quote(ScheidingsTeken) + ' + '
			);
			attribute<string> Body      (TeGeocoderen/bronDomein) :=
				  TeGeocoderen/bron/TableChopper/BodyLines + ScheidingsTeken 
				+ MakeDefined(TeGeocoderen/koppel_aan_bag_aggregaties/buurt/code,stringparams/emptystring) + ScheidingsTeken 
				+ MakeDefined(TeGeocoderen/koppel_aan_bag_aggregaties/wijk/code,stringparams/emptystring) + ScheidingsTeken 
				+ MakeDefined(TeGeocoderen/koppel_aan_bag_aggregaties/gemeente/code,stringparams/emptystring) + ScheidingsTeken  
				//+ MakeDefined(TeGeocoderen/koppel_aan_bag_aggregaties/nvm_afdeling/code,stringparams/emptystring) + ScheidingsTeken  
				+ BodyExtra + ScheidingsTeken ;
		}

		parameter<string> bestand := impl/Kopregel + stringparams/newline + AsList(impl/Body, stringparams/newline) + stringparams/newline 
		//+ substr(TeGeocoderen/koppel_aan_bag_aggregaties/metainformatie/bestand/resultaat,0,0)
		, StorageName       = "%LocalDataProjDir%/resultaat.csv"
		, StorageType       = "str"
		, ExplicitSuppliers = "TeGeocoderen/koppel_aan_bag_aggregaties/metainformatie/bestand/resultaat;"
							  "TeGeocoderen/koppel_aan_bag_aggregaties/metainformatie/buurt/resultaat;"
							  "TeGeocoderen/koppel_aan_bag_aggregaties/metainformatie/wijk/resultaat;"
							  "TeGeocoderen/koppel_aan_bag_aggregaties/metainformatie/gemeente/resultaat;";
							//"TeGeocoderen/koppel_aan_bag_aggregaties/metainformatie/nvm_afd/resultaat";
	}

	container analyses
	{
		#include<adresveld_wel_in_bron_niet_in_BAG.dms>
	}
}